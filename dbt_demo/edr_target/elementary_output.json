{"creation_time": "2024-03-04T15:27:20+00:00", "days_back": 7, "models": {"model.dbt_demo.my_first_dbt_model": {"name": "my_first_dbt_model", "unique_id": "model.dbt_demo.my_first_dbt_model", "owners": [], "tags": [], "package_name": "dbt_demo", "description": "A starter dbt model", "full_path": "models/example/my_first_dbt_model.sql", "meta": {}, "materialization": "table", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_first_dbt_model", "patch_path": "dbt_demo://models/example/schema.yml", "model_name": "my_first_dbt_model", "normalized_full_path": "dbt_demo/models/example/my_first_dbt_model.sql", "fqn": "dbt_demo.dev.my_first_dbt_model", "artifact_type": "model"}, "model.dbt_demo.my_second_dbt_model": {"name": "my_second_dbt_model", "unique_id": "model.dbt_demo.my_second_dbt_model", "owners": [], "tags": [], "package_name": "dbt_demo", "description": "A starter dbt model", "full_path": "models/example/my_second_dbt_model.sql", "meta": {}, "materialization": "view", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_second_dbt_model", "patch_path": "dbt_demo://models/example/schema.yml", "model_name": "my_second_dbt_model", "normalized_full_path": "dbt_demo/models/example/my_second_dbt_model.sql", "fqn": "dbt_demo.dev.my_second_dbt_model", "artifact_type": "model"}}, "groups": {"dbt": {"dbt_demo": {"models": {"example": {"__files__": [{"node_id": "model.dbt_demo.my_first_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_demo.my_second_dbt_model", "resource_type": "model"}]}}}}, "tags": {"No tags": [{"node_id": "model.dbt_demo.my_first_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_demo.my_second_dbt_model", "resource_type": "model"}]}, "owners": {"No owners": [{"node_id": "model.dbt_demo.my_first_dbt_model", "resource_type": "model"}, {"node_id": "model.dbt_demo.my_second_dbt_model", "resource_type": "model"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.dbt_demo.my_first_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_demo.not_null_my_first_dbt_model_id.5fb22c2710", "elementary_unique_id": "test.dbt_demo.not_null_my_first_dbt_model_id.5fb22c2710.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_first_dbt_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-04T15:23:42+00:00", "latest_run_time_utc": "2024-03-04T15:23:42+00:00", "latest_run_status": "fail", "model_unique_id": "model.dbt_demo.my_first_dbt_model", "table_unique_id": "dbt_demo.dev.my_first_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "select id\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": [{"id": null}], "error_message": "Got 1 result, configured to fail if != 0", "failed_rows_count": 1}}, {"metadata": {"test_unique_id": "test.dbt_demo.unique_my_first_dbt_model_id.16e066b321", "elementary_unique_id": "test.dbt_demo.unique_my_first_dbt_model_id.16e066b321.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_first_dbt_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-04T15:23:43+00:00", "latest_run_time_utc": "2024-03-04T15:23:43+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_demo.my_first_dbt_model", "table_unique_id": "dbt_demo.dev.my_first_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.dbt_demo.my_second_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_demo.not_null_my_second_dbt_model_id.151b76d778", "elementary_unique_id": "test.dbt_demo.not_null_my_second_dbt_model_id.151b76d778.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-04T15:23:42+00:00", "latest_run_time_utc": "2024-03-04T15:23:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_demo.my_second_dbt_model", "table_unique_id": "dbt_demo.dev.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbt_demo.unique_my_second_dbt_model_id.57a0f8c493", "elementary_unique_id": "test.dbt_demo.unique_my_second_dbt_model_id.57a0f8c493.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-04T15:23:43+00:00", "latest_run_time_utc": "2024-03-04T15:23:43+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_demo.my_second_dbt_model", "table_unique_id": "dbt_demo.dev.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.dbt_demo.my_first_dbt_model": {"errors": 0, "warnings": 0, "passed": 1, "failures": 1}, "model.dbt_demo.my_second_dbt_model": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}}, "test_runs": {"model.dbt_demo.my_first_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_demo.not_null_my_first_dbt_model_id.5fb22c2710", "elementary_unique_id": "test.dbt_demo.not_null_my_first_dbt_model_id.5fb22c2710.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_first_dbt_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-04T15:23:42+00:00", "latest_run_time_utc": "2024-03-04T15:23:42+00:00", "latest_run_status": "fail", "model_unique_id": "model.dbt_demo.my_first_dbt_model", "table_unique_id": "dbt_demo.dev.my_first_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "select id\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 1.0, "totals": {"errors": 0, "warnings": 0, "passed": 0, "failures": 2}, "invocations": [{"affected_rows": 1, "time_utc": "2024-03-04T14:56:49+00:00", "id": "c82d7099-878d-456a-add3-7933c3197525", "status": "fail"}, {"affected_rows": 1, "time_utc": "2024-03-04T15:23:42+00:00", "id": "a42d107e-e5f4-4d15-b1cc-1549d194c9bc", "status": "fail"}], "description": "There were 2 failures, no errors and no warnings on the last 2 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_demo.unique_my_first_dbt_model_id.16e066b321", "elementary_unique_id": "test.dbt_demo.unique_my_first_dbt_model_id.16e066b321.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_first_dbt_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-04T15:23:43+00:00", "latest_run_time_utc": "2024-03-04T15:23:43+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_demo.my_first_dbt_model", "table_unique_id": "dbt_demo.dev.my_first_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-04T14:56:50+00:00", "id": "c82d7099-878d-456a-add3-7933c3197525", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-03-04T15:23:43+00:00", "id": "a42d107e-e5f4-4d15-b1cc-1549d194c9bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}}], "model.dbt_demo.my_second_dbt_model": [{"metadata": {"test_unique_id": "test.dbt_demo.not_null_my_second_dbt_model_id.151b76d778", "elementary_unique_id": "test.dbt_demo.not_null_my_second_dbt_model_id.151b76d778.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-04T15:23:42+00:00", "latest_run_time_utc": "2024-03-04T15:23:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_demo.my_second_dbt_model", "table_unique_id": "dbt_demo.dev.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-04T14:56:49+00:00", "id": "c82d7099-878d-456a-add3-7933c3197525", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-03-04T15:23:42+00:00", "id": "a42d107e-e5f4-4d15-b1cc-1549d194c9bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}}, {"metadata": {"test_unique_id": "test.dbt_demo.unique_my_second_dbt_model_id.57a0f8c493", "elementary_unique_id": "test.dbt_demo.unique_my_second_dbt_model_id.57a0f8c493.id.generic", "database_name": "DBT_DEMO", "schema_name": "DEV", "table_name": "my_second_dbt_model", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-04T15:23:43+00:00", "latest_run_time_utc": "2024-03-04T15:23:43+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbt_demo.my_second_dbt_model", "table_unique_id": "dbt_demo.dev.my_second_dbt_model", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom DBT_DEMO.DEV.my_second_dbt_model\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-04T14:56:50+00:00", "id": "c82d7099-878d-456a-add3-7933c3197525", "status": "pass"}, {"affected_rows": null, "time_utc": "2024-03-04T15:23:43+00:00", "id": "a42d107e-e5f4-4d15-b1cc-1549d194c9bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}}]}, "test_runs_totals": {"model.dbt_demo.my_first_dbt_model": {"errors": 0, "warnings": 0, "passed": 2, "failures": 2}, "model.dbt_demo.my_second_dbt_model": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}}, "coverages": {"model.dbt_demo.my_first_dbt_model": {"table_tests": 0, "column_tests": 2}, "model.dbt_demo.my_second_dbt_model": {"table_tests": 0, "column_tests": 2}}, "model_runs": [{"unique_id": "model.dbt_demo.my_first_dbt_model", "schema": "DEV", "name": "my_first_dbt_model", "status": "success", "last_exec_time": 1.6, "median_exec_time": 1.6, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "last_generated_at": "2024-03-04T15:07:09+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "time_utc": "2024-03-04T15:07:09+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}]}, {"unique_id": "model.dbt_demo.my_second_dbt_model", "schema": "DEV", "name": "my_second_dbt_model", "status": "success", "last_exec_time": 0.5, "median_exec_time": 0.5, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom DBT_DEMO.DEV.my_first_dbt_model\nwhere id = 1", "last_generated_at": "2024-03-04T15:07:09+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "time_utc": "2024-03-04T15:07:09+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.5}]}], "model_runs_totals": {"model.dbt_demo.my_first_dbt_model": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.dbt_demo.my_second_dbt_model": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "filters": {"test_results": [{"name": "failures", "display_name": "Failures", "model_unique_ids": ["model.dbt_demo.my_first_dbt_model"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_demo.my_first_dbt_model", "model.dbt_demo.my_second_dbt_model"]}], "test_runs": [{"name": "failures", "display_name": "Failures", "model_unique_ids": ["model.dbt_demo.my_first_dbt_model"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.dbt_demo.my_first_dbt_model", "model.dbt_demo.my_second_dbt_model"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.dbt_demo.my_first_dbt_model", "model.dbt_demo.my_second_dbt_model"]}]}, "lineage": {"nodes": [{"id": "model.dbt_demo.my_first_dbt_model", "type": "model", "sub_type": "table"}, {"id": "model.dbt_demo.my_second_dbt_model", "type": "model", "sub_type": "view"}], "edges": [["model.dbt_demo.my_second_dbt_model", "model.dbt_demo.my_first_dbt_model"]]}, "invocations": [{"invocation_id": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}], "resources_latest_invocation": {"model.elementary.alerts_dbt_source_freshness": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.schema_columns_snapshot": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_artifacts_hashes": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_run_results": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.elementary_test_results": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.monitors_runs": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_columns": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.snapshot_run_results": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.metrics_anomaly_score": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_models": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.anomaly_threshold_sensitivity": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_snapshots": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.information_schema_columns": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_exposures": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.model_run_results": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.metadata": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.dbt_demo.my_second_dbt_model": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_sources": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.test_result_rows": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.alerts_anomaly_detection": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.alerts_dbt_tests": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_metrics": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_tests": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.alerts_schema_changes": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_invocations": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.alerts_dbt_models": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.data_monitoring_metrics": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_seeds": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.enriched_columns": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.dbt_source_freshness_results": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.elementary.job_run_results": "ba6e828f-c627-4baa-b94d-9bdb7f95788f", "model.dbt_demo.my_first_dbt_model": "ba6e828f-c627-4baa-b94d-9bdb7f95788f"}, "invocations_job_identification": {}, "env": {"project_name": "dbt_demo", "env": "dev", "warehouse_type": "snowflake"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "ccb7f52f-c119-4790-9a34-3be2535c6ac0", "anonymous_warehouse_id": "03b1fc777f55c1e53e648bf55e5f00b4959c3eb2ca018223f1c99115887b9296"}}